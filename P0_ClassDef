#####################################################################
# Author: Alexandra Yuhas
# Username: yuhasa
#
# Assignment: P0: Final Project
#
# Purpose: This file creates a class called Decrypt which is used to decrypt encrypted ciphers.
######################################################################
# Acknowledgements: Dr. Scott Heggen for a lot of help.
#
# licensed under a Creative Commons
# Attribution-Noncommercial-Share Alike 3.0 United States License.
####################################################################################

class Decrypt:

    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

    def __init__(self, input_file = "message_input.txt"):
        """
        A constructor for the Decrypt class

        :param input_file: The file to be decrypted
        """
        self.input_file = input_file                         # The file to be encrypted or decrypted                          # Either "encrypt" or "decrypt"
        self.import_file()                                   # This calls the import_file method
        self.cipher = ""                                     # A placeholder for the cipher

    def import_file(self):
        """
        Imports a file stored in the variable self.input_file

        :return: a string representing the contents of the file
        """
        f = open(self.input_file, "r")
        self.cipher = f.read()                   # Set self.cipher to the file contents
        f.close()

    def export_file(self, text_to_export, filename):
        """
        Exports a file called filename

        :param text_to_export: the string to be written to the exported file
        :param filename: a string representing the name of the file to be exported to
        """
        f = open(filename, "w")
        f.write(text_to_export)
        f.close()
        print("File exported to " + filename)


    def most_common(self, cipher, alphabet, new_letter):
        for letter in alphabet:
            if letter in cipher:
                num_letter = #number of times letter shows up.
            elif letter not in cipher:
                num_letter = 0
            if num_letter > #all other num_letters:
                cipher.replace(letter, new_letter)
            else:
                pass


    def two_starting(self):
        pass

    def two_ending(self):
        pass

    def four_ending(self):
        pass

    def three_starting_ending(self):
        pass

    def three_starting(self):
        pass

    def three_ending(self):
        pass

    def twice_in_row(self):
        pass



